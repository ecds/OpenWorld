{
  "version": 3,
  "sources": ["../../../app/routes/buildings.$year.tsx", "../../../app/utils.ts"],
  "sourcesContent": ["import maplibregl from 'maplibre-gl'\nimport { useLoaderData } from \"@remix-run/react\";\nimport { useContext, useEffect } from \"react\";\nimport MapContext from \"~/mapContext\";\nimport { buildings } from \"~/data/buildings\";\nimport { printProps } from '~/utils';\n\nexport function loader({ params }) {\n  return { year: params.year, ...buildings[params.year] };\n}\n\nexport default function Buildings() {\n  const { year, source, layer } = useLoaderData();\n  const { mapState,  setCurrentYearState } = useContext(MapContext);\n\n  useEffect(() => {\n    setCurrentYearState(parseInt(year));\n\n    return () => {\n      setCurrentYearState(undefined);\n    }\n  }, [year, setCurrentYearState]);\n\n  useEffect(() => {\n    const layerId = layer.id;\n    mapState?.addSource(layerId, source);\n    mapState?.addLayer(layer);\n    mapState?.once('idle', () => {\n      console.log(\"\uD83D\uDE80 ~ file: buildings.$year.tsx:31 ~ mapState?.on ~ idle:\", 'idle')\n      if (mapState.getLayer(layerId)) mapState.moveLayer(layerId);\n    });\n\n\n    // When a click event occurs on a feature in the states layer, open a popup at the\n    // location of the click, with description HTML from its properties.\n    mapState?.on('click', layerId, (({\n      lngLat,\n      features\n    }) => {\n      new maplibregl.Popup()\n        .setLngLat(lngLat)\n        .setHTML(`<article>${printProps(features[0].properties)}</article>`)\n        .addTo(mapState);\n    }));\n\n    // Change the cursor to a pointer when the mouse is over the states layer.\n    mapState?.on('mouseenter', layerId, (() => {\n      mapState.getCanvas().style.cursor = 'pointer';\n    }));\n\n    // Change it back to a pointer when it leaves.\n    mapState?.on('mouseleave', layerId, (() => {\n      mapState.getCanvas().style.cursor = '';\n    }));\n\n    return () => {\n      // mapState?.off('idle', layerId, () => mapState.moveLayer(layerId));\n      mapState?.removeLayer(layerId);\n      mapState?.removeSource(layerId);\n    }\n  }, [mapState, source, layer]);\n\n  return(\n    <section></section>\n  )\n}", "export const printProps = ((props) => {\n  return Object.keys(props).map((prop) => {\n    return `<p>${prop}: ${props[prop] ?? \"nope\"}</p>`;\n  }).join('');\n});"],
  "mappings": ";;;;;;;;;;;;;;AAAA,yBAAuB;AAEvB,IAAAA,gBAAsC;;;ACF/B,IAAM,aAAc,CAAC,UAAU;AACpC,SAAO,OAAO,KAAK,KAAK,EAAE,IAAI,CAAC,SAAS;AAD1C;AAEI,WAAO,MAAM,UAAS,WAAM,UAAN,YAAe;AAAA,EACvC,CAAC,EAAE,KAAK,EAAE;AACZ;;;AD2DI;AApDW,SAAR,YAA6B;AAClC,QAAM,EAAE,MAAM,QAAQ,MAAM,IAAI,cAAc;AAC9C,QAAM,EAAE,UAAW,oBAAoB,QAAI,0BAAW,kBAAU;AAEhE,+BAAU,MAAM;AACd,wBAAoB,SAAS,IAAI,CAAC;AAElC,WAAO,MAAM;AACX,0BAAoB,MAAS;AAAA,IAC/B;AAAA,EACF,GAAG,CAAC,MAAM,mBAAmB,CAAC;AAE9B,+BAAU,MAAM;AACd,UAAM,UAAU,MAAM;AACtB,yCAAU,UAAU,SAAS;AAC7B,yCAAU,SAAS;AACnB,yCAAU,KAAK,QAAQ,MAAM;AAC3B,cAAQ,IAAI,mEAA4D,MAAM;AAC9E,UAAI,SAAS,SAAS,OAAO;AAAG,iBAAS,UAAU,OAAO;AAAA,IAC5D;AAKA,yCAAU,GAAG,SAAS,SAAU,CAAC;AAAA,MAC/B;AAAA,MACA;AAAA,IACF,MAAM;AACJ,UAAI,mBAAAC,QAAW,MAAM,EAClB,UAAU,MAAM,EAChB,QAAQ,YAAY,WAAW,SAAS,GAAG,UAAU,aAAa,EAClE,MAAM,QAAQ;AAAA,IACnB;AAGA,yCAAU,GAAG,cAAc,SAAU,MAAM;AACzC,eAAS,UAAU,EAAE,MAAM,SAAS;AAAA,IACtC;AAGA,yCAAU,GAAG,cAAc,SAAU,MAAM;AACzC,eAAS,UAAU,EAAE,MAAM,SAAS;AAAA,IACtC;AAEA,WAAO,MAAM;AAEX,2CAAU,YAAY;AACtB,2CAAU,aAAa;AAAA,IACzB;AAAA,EACF,GAAG,CAAC,UAAU,QAAQ,KAAK,CAAC;AAE5B,SACE,mDAAC,eAAD;AAAA;AAAA;AAAA;AAAA,SAAS;AAEb;",
  "names": ["import_react", "maplibregl"]
}
